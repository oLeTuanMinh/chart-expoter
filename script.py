# Ph√¢n t√≠ch v·∫•n ƒë·ªÅ v·ªõi CloudWatch Chart Exporter
print("=== PH√ÇN T√çCH V·∫§N ƒê·ªÄ V·ªöI AWS CLOUDWATCH CHART EXPORTER ===")
print()

print("üîç NGUY√äN NH√ÇN G·ªêC R·ªÆA C·ª¶A V·∫§N ƒê·ªÄ:")
print("T·ª´ l·ªánh AWS CLI c·ªßa b·∫°n th√†nh c√¥ng:")
print('aws cloudwatch get-metric-widget-image --region ap-southeast-1 \\')
print('    --metric-widget \'{"metrics":[["AWS/EC2","CPUUtilization","InstanceId","i-0b7c8d02813c56a21"]]}\' \\')
print('    --output-format png \\')
print('    --output text | base64 --decode > image.png')
print()

print("üìã C√ÅC V·∫§N ƒê·ªÄ TH∆Ø·ªúNG G·∫∂P V·ªöI APP WEB:")
issues = [
    {
        "issue": "Thi·∫øu field 'view': 'timeSeries'",
        "description": "JSON widget configuration thi·∫øu field view b·∫Øt bu·ªôc",
        "severity": "HIGH"
    },
    {
        "issue": "CORS Configuration",
        "description": "Browser kh√¥ng th·ªÉ g·ªçi CloudWatch API do CORS restrictions",
        "severity": "CRITICAL"
    },
    {
        "issue": "Credentials trong Browser",
        "description": "AWS credentials kh√¥ng ƒë∆∞·ª£c handle ƒë√∫ng c√°ch trong browser environment",
        "severity": "HIGH"
    },
    {
        "issue": "Response Format",
        "description": "API tr·∫£ v·ªÅ XML format nh∆∞ng app expect JSON",
        "severity": "MEDIUM"
    },
    {
        "issue": "Region Configuration",
        "description": "Region setting kh√¥ng ƒë√∫ng ho·∫∑c thi·∫øu",
        "severity": "LOW"
    }
]

for i, issue in enumerate(issues, 1):
    print(f"{i}. {issue['issue']} ({issue['severity']})")
    print(f"   ‚Üí {issue['description']}")
    print()

print("üéØ GI·∫¢I PH√ÅP ƒê·ªÄ XU·∫§T:")
solutions = [
    "S·ª≠ d·ª•ng AWS CLI thay v√¨ JavaScript SDK trong browser",
    "T·∫°o API Gateway + Lambda ƒë·ªÉ proxy requests",
    "S·ª≠ d·ª•ng AWS Cognito cho authentication",
    "Fix JSON widget configuration v·ªõi t·∫•t c·∫£ required fields",
    "Handle XML response format t·ª´ CloudWatch API"
]

for i, solution in enumerate(solutions, 1):
    print(f"{i}. {solution}")

print()
print("‚úÖ KHUY·∫æN NGH·ªä: T·∫°o ·ª©ng d·ª•ng server-side thay v√¨ client-side")